name: Validate Example Configurations

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

jobs:
  discover-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    #- name: Clone config-checker
    #  run: |
    #    git clone --recurse-submodules https://github.com/precice-forschungsprojekt/config-checker.git
    #    echo "Config-checker cloned to $(pwd)/config-checker"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies of precice-gen
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install .

    #- name: Update package list
    #  run: |
    #    sudo apt-get update

    #- name: Install preCICE
    #  run: |
    #    wget https://github.com/precice/precice/releases/download/v3.1.2/libprecice3_3.1.2_noble.deb
    #    sudo apt install -y ./libprecice3_3.1.2_noble.deb

    #- name: Install dependencies of config-checker
    #  run: |
    #    source venv/bin/activate
    #    sudo apt install -y libopenmpi-dev
    #    python -m pip install --upgrade pip setuptools cython
    #    cd config-checker
    #    pip install .

    - name: Test CLI of precice-gen
      run: |
        source venv/bin/activate
        precice-gen --help

    #- name: Test CLI of config-checker
    #  run: |
    #    source venv/bin/activate
    #    cd config-checker
    #    python preciceconfigchecker/cli.py

    - name: Discover examples
      id: find-examples
      run: |
        # Find all example directories containing precice-config.xml
        EXAMPLES=$(find examples -name "precice-config.xml" -exec dirname {} \; | sort | uniq)
        # Convert to JSON array for GitHub Actions output
        EXAMPLES_JSON=$(echo "$EXAMPLES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
        echo "examples=$EXAMPLES_JSON" >> $GITHUB_OUTPUT
        echo "Found examples: $EXAMPLES_JSON"
      outputs:
        examples: ${{ steps.find-examples.outputs.examples }}

    - name: Set matrix for examples
      run: echo "examples=${{ steps.find-examples.outputs.examples }}"

  generate-configurations:
    runs-on: ubuntu-latest
    needs: discover-and-test
    strategy:
      matrix:
        example: ${{ fromJson(needs.discover-and-test.outputs.examples) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Generate precice configurations for examples
      run: |
        echo "Processing example: ${{ matrix.example }}"
        
        # Create output directory
        OUTPUT_DIR="generated_configs/$(basename ${{ matrix.example }})"
        mkdir -p $OUTPUT_DIR
        
        # Find input YAML file (assuming same name as directory)
        EXAMPLE_NAME=$(basename ${{ matrix.example }})
        INPUT_YAML="${{ matrix.example }}/$EXAMPLE_NAME.yaml"
        
        # Run precice-gen if input YAML exists
        if [ -f "$INPUT_YAML" ]; then
          echo "Generating from $INPUT_YAML"
          precice-gen -f "$INPUT_YAML" -o "$OUTPUT_DIR"
        else
          echo "Using existing precice-config.xml"
          cp "${{ matrix.example }}/precice-config.xml" "$OUTPUT_DIR/"
        fi
