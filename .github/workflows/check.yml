name: Validate Example Configurations

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

jobs:
  process-examples:
    runs-on: ubuntu-latest
    
    steps:
    # Initial setup
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # - name: Install system dependencies
    #   run: |
    #     sudo apt-get update
    #     sudo apt install -y libopenmpi-dev jq

    # - name: Install preCICE
    #   run: |
    #     wget https://github.com/precice/precice/releases/download/v3.1.2/libprecice3_3.1.2_noble.deb
    #     sudo apt install -y ./libprecice3_3.1.2_noble.deb

    - name: Setup Python environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip setuptools cython
        pip install .

    # - name: Install config-checker
    #   run: |
    #     source venv/bin/activate
    #     git clone --recurse-submodules https://github.com/precice-forschungsprojekt/config-checker.git
    #     cd config-checker
    #     pip install -e .
    #     cd ..

    # Discover examples
    - name: Find all examples
      id: find-examples
      run: |
        EXAMPLES=$(find examples -name "precice-config.xml" -exec dirname {} \; | sort | uniq)
        EXAMPLES_JSON=$(echo "$EXAMPLES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
        echo "examples=$EXAMPLES_JSON" >> $GITHUB_OUTPUT
        echo "Found examples: $EXAMPLES_JSON"

    # Process each example
    - name: Process examples
      env:
        EXAMPLES: ${{ steps.find-examples.outputs.examples }}
      run: |
        source venv/bin/activate
        
        # Create output directory
        mkdir -p _generated
        
        # Process each example
        for example in $(echo "$EXAMPLES" | jq -r '.[]'); do
          echo "Processing example: $example"
          example_name=$(basename "$example")
          
          # Create example-specific output directory
          output_dir="_generated/$example_name"
          mkdir -p "$output_dir"
          
          # Check for YAML input file
          yaml_file="$example/$example_name.yaml"
          
          if [ -f "$yaml_file" ]; then
            echo "Generating configuration from $yaml_file"
            precice-gen -f "$yaml_file" -o "$output_dir"
          else
            echo "Using existing precice-config.xml"
            cp "$example/precice-config.xml" "$output_dir/"
          fi
          
          # # Validate the configuration
          # if [ -f "$output_dir/precice-config.xml" ]; then
          #   echo "Validating configuration..."
          #   python config-checker/preciceconfigchecker/cli.py validate "$output_dir/precice-config.xml"
          #   echo "Validation successful for $example_name"
          # else
          #   echo "Error: No configuration file generated for $example_name"
          #   exit 1
          # fi
        done

    # # Optional: Upload generated configs as artifact
    # - name: Upload generated configurations
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: generated-configs
    #     path: _generated/